â¸»

âœ… Acknowledgement: AMAP (Application Mapper) â€“ Kali Linux

ðŸ”— Official tool page: https://www.kali.org/tools/amap

1) What is AMAP?

AMAP is a service fingerprinting tool that identifies which application/protocol is running on a given TCP/UDP port, even when the service uses a non-standard port.

2) Why use AMAP?
	â€¢	Detects real services behind open ports (avoids wrong assumptions).
	â€¢	Finds misconfigured/hidden services on unusual ports.
	â€¢	Complements port scanners (e.g., Nmap) with accurate service IDs.

3) How does AMAP work?
	1.	You provide target host/ports (often after an Nmap scan).
	2.	AMAP sends crafted probes and reads the response/banner.
	3.	It matches the response against its fingerprint database to name the service.

â¸»

4) Exact Use Case (Lab Example)

Context: Your macOS (M2) runs a Node.js app on http://localhost:3000; scanned from Kali (UTM).

Command:

amap -bqv 192.168.18.54 3000

Flags:
	â€¢	-b print ASCII banner
	â€¢	-q hide closed ports
	â€¢	-v verbose

Observed response:

HTTP/1.1 400 Bad Request

Interpretation: The server replied, confirming an HTTP service on port 3000 (non-standard for HTTP). AMAP successfully identified the application protocol behind the port.

â¸»

5) Practical Workflow (Nmap âžœ AMAP)
	1.	Find open ports

nmap -p- <target>

	2.	Fingerprint services on those ports

amap -B <target> <port1> <port2> ...


â¸»

6) Limitations
	â€¢	Fingerprint DB may be older than Nmapâ€™s modern service detection.
	â€¢	Can trigger IDS/IPS (active probes).
	â€¢	Works best when combined with a prior port scan.

â¸»

7) Summary
	â€¢	What: AMAP fingerprints services on TCP/UDP ports.
	â€¢	Why: To accurately identify real applications, especially on non-standard ports.
	â€¢	How: Probe âžœ banner/response âžœ fingerprint match.
	â€¢	Use case shown: Confirmed HTTP on port 3000 for a local Node.js app.

â¸»

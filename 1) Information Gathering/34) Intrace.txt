‚∏ª

‚úÖ Acknowledgement: InTrace ‚Äì Traceroute via TCP Connections (Kali Linux)

üîó Official Tool Page: https://www.kali.org/tools/intrace/

‚∏ª

1. What is InTrace?

InTrace is a network reconnaissance tool that performs traceroute using active TCP connections. Unlike the classic traceroute or tracert (which use ICMP/UDP), InTrace leverages existing TCP connections to map the path between a client and a server.

It was designed to work stealthily by reusing active sessions, making it harder to detect compared to traditional traceroute methods.

‚∏ª

2. Why use it?
	‚Ä¢	To identify intermediate routers/firewalls between you and a target host.
	‚Ä¢	To map the network path in environments where ICMP/UDP packets are blocked.
	‚Ä¢	Useful in penetration testing to understand filtering, routing, and firewall behavior.
	‚Ä¢	Helps attackers or defenders learn how traffic flows to a given TCP port.

‚∏ª

3. How does InTrace work?
	1.	You specify a target IP/hostname and a TCP port (e.g., 80 for HTTP).
	2.	InTrace attaches to an active TCP session or establishes one.
	3.	It listens for ICMP Time Exceeded messages generated as packets traverse routers.
	4.	Each router hop that decrements the TTL (time-to-live) responds with ICMP ‚Üí InTrace records it.
	5.	The result is a hop-by-hop traceroute of the TCP session path.

‚∏ª

4. Exact Use Case (Lab Example)

Command:

intrace -h example.com -p 80 -s 4

Observed Output:

=========================[ InTrace 1.6 ]========================
Remote: 2600:1406:5e00:6::17ce:bc12/0 (80)
Local: ::/0
Payload Size: 4 bytes, Seq: 0x00000000, Ack: 0x00000000
Status: Sniffing for connection packets

	‚Ä¢	No hops displayed ‚Üí means no ICMP responses were received (likely filtered or blocked).
	‚Ä¢	In controlled labs, successful runs show each router hop (src addr, icmp src addr, pkt type).

Interpretation:
	‚Ä¢	For example.com:80, ICMP responses were blocked ‚Üí traceroute did not reveal intermediate routers.
	‚Ä¢	This is normal for hardened/public servers (they suppress traceroute data).

‚∏ª

5. Practical Workflow
	‚Ä¢	Traceroute via HTTP (port 80):

intrace -h target.com -p 80 -s 4

	‚Ä¢	Traceroute via HTTPS (port 443):

intrace -h target.com -p 443 -s 4

	‚Ä¢	Traceroute via a custom service (Node.js app on port 3000):

intrace -h target.com -p 3000 -s 4


‚∏ª

6. Limitations
	‚Ä¢	Requires root/admin privileges (needs raw socket access).
	‚Ä¢	Will not work if ICMP ‚ÄúTime Exceeded‚Äù packets are filtered.
	‚Ä¢	Only maps the path for a specific TCP port.
	‚Ä¢	Output may be empty against secure/public domains (like example.com).
	‚Ä¢	IPv6 often complicates results (not all devices reply).

‚∏ª

7. Summary
	‚Ä¢	What: InTrace is a TCP-based traceroute tool.
	‚Ä¢	Why: To discover network paths even when ICMP is blocked.
	‚Ä¢	How: Uses TCP sessions to elicit ICMP ‚ÄúTime Exceeded‚Äù packets.
	‚Ä¢	Use Case: Against example.com:80, no hops were revealed (ICMP blocked).

üëâ In short:
InTrace is valuable for stealth traceroute in penetration testing labs, but in modern hardened networks, its results are often limited due to ICMP filtering.

‚∏ª
